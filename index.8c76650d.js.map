{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,SAAS,gBAAgB,CAAC,mBAAoB,WAcnC,IAAA,EAAT,WACE,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE3C,CAAA,EAAgB,QAAQ,CAAG,GAAY,EACvC,EAAgB,QAAQ,CAAG,GAAY,EACvC,EAAmB,QAAQ,CAAG,GAAY,EAC1C,EAAmB,QAAQ,CAAG,GAAY,CAC5C,EArBM,EAAW,GACX,EAAW,EACX,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAqB,SAAS,aAAa,CAAC,kBAElD,EAAgB,gBAAgB,CAAC,QAejC,WACE,IAAI,CAAA,EAAM,IAAI,CAAC,MAAM,EAAI,CAAA,GAOzB,IAAK,IAHC,EAAS,EAAM,SAAS,GACxB,EAAY,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAEnC,EAAI,EAAG,EAAI,EAAW,IAC7B,EAAO,UAAU,GAGnB,IACF,GA3BA,EAAgB,gBAAgB,CAAC,QA6BjC,WACM,EAAM,IAAI,CAAC,MAAM,EAAI,IAIzB,EAAM,SAAS,CAAC,IAChB,IACF,GAnCA,EAAmB,gBAAgB,CAAC,QAqCpC,WACM,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAI,IAIjC,EAAG,EAAM,IAAI,EAAE,OAAO,CAAC,SAAC,CAAxB,EACC,EAAI,UAAU,EAChB,GAEA,IACF,GA9CA,EAAmB,gBAAgB,CAAC,QAgDpC,WACM,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAI,IAIjC,EAAG,EAAM,IAAI,EAAE,OAAO,CAAC,SAAC,CAAxB,EACC,EAAI,UAAU,CAAC,GACjB,GAEA,IACF,GAEA,GACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write code here\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var updateButtons = function updateButtons() {\n        var rowCount = table.rows.length;\n        var colCount = table.rows[0].cells.length;\n        appendRowButton.disabled = rowCount >= maxCount;\n        removeRowButton.disabled = rowCount <= minCount;\n        appendColumnButton.disabled = colCount >= maxCount;\n        removeColumnButton.disabled = colCount <= minCount;\n    };\n    var appendRow = function appendRow() {\n        if (table.rows.length >= maxCount) return;\n        var newRow = table.insertRow();\n        var cellCount = table.rows[0].cells.length;\n        for(var i = 0; i < cellCount; i++)newRow.insertCell();\n        updateButtons();\n    };\n    var removeRow = function removeRow() {\n        if (table.rows.length <= minCount) return;\n        table.deleteRow(-1);\n        updateButtons();\n    };\n    var appendColumn = function appendColumn() {\n        if (table.rows[0].cells.length >= maxCount) return;\n        _to_consumable_array(table.rows).forEach(function(row) {\n            row.insertCell();\n        });\n        updateButtons();\n    };\n    var removeColumn = function removeColumn() {\n        if (table.rows[0].cells.length <= minCount) return;\n        _to_consumable_array(table.rows).forEach(function(row) {\n            row.deleteCell(-1);\n        });\n        updateButtons();\n    };\n    var maxCount = 10;\n    var minCount = 2;\n    var table = document.querySelector(\".field\");\n    var appendRowButton = document.querySelector(\".append-row\");\n    var removeRowButton = document.querySelector(\".remove-row\");\n    var appendColumnButton = document.querySelector(\".append-column\");\n    var removeColumnButton = document.querySelector(\".remove-column\");\n    appendRowButton.addEventListener(\"click\", appendRow);\n    removeRowButton.addEventListener(\"click\", removeRow);\n    appendColumnButton.addEventListener(\"click\", appendColumn);\n    removeColumnButton.addEventListener(\"click\", removeColumn);\n    updateButtons();\n});\n\n//# sourceMappingURL=index.8c76650d.js.map\n","'use strict';\n\n// write code here\ndocument.addEventListener('DOMContentLoaded', () => {\n  const maxCount = 10;\n  const minCount = 2;\n  const table = document.querySelector('.field');\n  const appendRowButton = document.querySelector('.append-row');\n  const removeRowButton = document.querySelector('.remove-row');\n  const appendColumnButton = document.querySelector('.append-column');\n  const removeColumnButton = document.querySelector('.remove-column');\n\n  appendRowButton.addEventListener('click', appendRow);\n  removeRowButton.addEventListener('click', removeRow);\n  appendColumnButton.addEventListener('click', appendColumn);\n  removeColumnButton.addEventListener('click', removeColumn);\n\n  function updateButtons() {\n    const rowCount = table.rows.length;\n    const colCount = table.rows[0].cells.length;\n\n    appendRowButton.disabled = rowCount >= maxCount;\n    removeRowButton.disabled = rowCount <= minCount;\n    appendColumnButton.disabled = colCount >= maxCount;\n    removeColumnButton.disabled = colCount <= minCount;\n  }\n\n  function appendRow() {\n    if (table.rows.length >= maxCount) {\n      return;\n    }\n\n    const newRow = table.insertRow();\n    const cellCount = table.rows[0].cells.length;\n\n    for (let i = 0; i < cellCount; i++) {\n      newRow.insertCell();\n    }\n\n    updateButtons();\n  }\n\n  function removeRow() {\n    if (table.rows.length <= minCount) {\n      return;\n    }\n\n    table.deleteRow(-1);\n    updateButtons();\n  }\n\n  function appendColumn() {\n    if (table.rows[0].cells.length >= maxCount) {\n      return;\n    }\n\n    [...table.rows].forEach((row) => {\n      row.insertCell();\n    });\n\n    updateButtons();\n  }\n\n  function removeColumn() {\n    if (table.rows[0].cells.length <= minCount) {\n      return;\n    }\n\n    [...table.rows].forEach((row) => {\n      row.deleteCell(-1);\n    });\n\n    updateButtons();\n  }\n\n  updateButtons();\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","document","addEventListener","updateButtons","rowCount","table","rows","colCount","cells","appendRowButton","disabled","maxCount","removeRowButton","minCount","appendColumnButton","removeColumnButton","querySelector","newRow","insertRow","cellCount","insertCell","deleteRow","forEach","row","deleteCell"],"version":3,"file":"index.8c76650d.js.map"}